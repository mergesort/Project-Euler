//
//  ViewController.m
//  Euler
//
//  Created by Joseph Fabisevich on 1/8/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import "ViewController.h"
#import "ResultsViewController.h"
#import "objc/message.h"

//http://projecteuler.net/problems

@implementation ViewController

@synthesize currentPopTipViewTarget;
@synthesize visiblePopTipViews;

- (void)viewDidLoad
{
    [super viewDidLoad];
	self.title = @"Project Euler";

	visiblePopTipViews = [NSMutableArray array];
	
	[self loadProblems];
}

-(void) solveProblem: (int) index
{
	SEL currSelector = problemList[index];
	objc_msgSend(self,currSelector,nil);
	
	ResultsViewController *results = [[ResultsViewController alloc] initWithNibName:@"ResultsViewController" bundle:nil];
	[self.navigationController pushViewController:results animated:YES];
	
	results.question.text = question;
	results.answer.text = answer;
	results.explanation.text = explanation;
}

-(void) problem1
{
	int sum = 0;
	for(int i = 0; i < 1000; i++)
	{
		if(i % 3 == 0 || i % 5 == 0)
			sum+=i;
	}
	
	question = @"If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.";
	answer = [NSString stringWithFormat:@"The sum of multiples is %i.", sum];
	explanation = @"Just add all the values that are divisible by 3 or 5 until you reach 999.";
}

-(void) problem2
{
    int first = 0, second = 1, sum = 0;
	
    for(int i = 0; i < 4000000; i++)
	{ 
        i = first + second;  
        first = second;
        second = i;
        if (i %2 == 0)
            sum += i;
    } 
	
	question = @"Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";
	answer = [NSString stringWithFormat:@"The sum of multiples is %i", sum];
	explanation = @"The fibonacci sequence adds the two latest terms in the chain, and making that the next number.  The process is repeated to come up with the next fibonacci number.  You should continue to do this until you reach your maximum value, in our case 4,000,000.  During each iteration of the fibonacci sequence you should check to see if the value is even, and if it is add it to the running total.";
}


-(BOOL) isPrime: (long) n
{
	if ((n % 2 == 0) && (n != 2))
		return NO;		

	for (long i = 3; i <= (n^(1/2)+1); i += 2)	
		if (n % i == 0)
			return NO;
	return YES;
}

/*
-(void) problem3
{
	long long number = 600851475143;
	
	long iNum = 1;
	
	long largestPrimeFactor = 0;
	
	while (iNum <= number)
	{
		if (iNum != 1 && number % iNum == 0)
		{
			long iPrime = 2;
			
			bool isPrime = true;
			
			while (iPrime < iNum)
			{
				if (iNum % iPrime == 0)
				{
					isPrime = false;
				}
				iPrime++;
			}
			
			if (isPrime)
				largestPrimeFactor = iNum;
		}
		
		iNum++;
	}
	
//	Console.WriteLine(largestPrimeFactor);

	question = @"The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143?";
	answer = [NSString stringWithFormat: @"%i", largestPrimeFactor];
	explanation = @"Explanation";
}
*/

-(NSString *)reverseString:(NSString *)originalString
{
	int lengthOfString = [originalString length];
	
	NSMutableString *reorderedString = [[NSMutableString alloc] initWithCapacity:lengthOfString];
	
	for (int x = 0; x < lengthOfString; x++) 
	{
		NSString *element = [NSString stringWithFormat:@"%C", [originalString characterAtIndex:x]];
		[reorderedString insertString:element atIndex:0];
	} 
	
	return reorderedString;
}

-(void) problem4
{
	int highestNumber = 0;
	for(int i = 999; i >= 100; i--)
		for(int j = 999; j >= 100; j--)
		{
			NSString *currValue = [NSString stringWithFormat:@"%i", i * j];
			NSString *reverse = [self reverseString:currValue];

			if([currValue isEqualToString:reverse])
			{
				if(i * j > highestNumber)
					highestNumber = i * j;
				break;
			}
		}
	
	question = @"A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99. Find the largest palindrome made from the product of two 3-digit numbers.";
	answer = [NSString stringWithFormat: @"%i", highestNumber];
	explanation = @"A palindrome is a word or number that is read the same backwards as it is forwards. That means that when it's a string, you can reverse the string and compare it's value to the original string. I work my way down from 999 to 100 in a double for loop, and check whenever we do find a palindrome whether that is the highest number so far, and if it is, it takes the place of the highest number.";
}

-(BOOL) checkFactor: (long) result
{
    for (int m = 11; m <= 20; m++)
        if (result % m != 0)
            return false;
    return true;
}

-(void) problem5
{
	long i = 2520;
	while(![self checkFactor: i])
	{
		if([self checkFactor:i])
		{
			NSLog(@"%ld", i);
			break;
		}
		i+=2520;
	}

	//Primes that are not multiplied to make other numbers in the sequence and numbers that have factors of primes
	//232792560
	//2*5*7*8*9*11*13*17*19
	
	question = @"2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.	What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?";
	answer = [NSString stringWithFormat: @"%ld", i];
	explanation = @"";
}

-(void) problem6
{
	int sumOfSquares = 0;
	for(int i = 1; i <= 100; i++)
		sumOfSquares += i*i;
	
	int naturalSquares = 0;
	for(int i = 1; i <= 100; i++)
		naturalSquares += i;

	naturalSquares = naturalSquares*naturalSquares;
	

	question = @"The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385.  The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^2 = 552 = 3025.  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025  385 = 2640. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.";
	answer = [NSString stringWithFormat:@"%i", naturalSquares-sumOfSquares];
	explanation = @"The problem is simply solved iteratively. First you add up the total of i^2 from 1 to 100 to find the sum of squares.  Then in another for loop you add up the total of i from 1 to 100 and outside of the loop square that value.  That will give you the natural squares.  You subtract the first value from the second value, and you have your solution.";
}

-(void) problem7
{
	int numPrimes = 1;
	int i = 2;
	
	for(; numPrimes <= 10001; i++)
	{
		if ([self isPrime: i])
			numPrimes++;
	}
	
	question = @"By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.  What is the 10,001st prime number?";
	answer = [NSString stringWithFormat:@"%i", i-1]; //Undo the last i++
	explanation = @"";
}

-(void) problem8
{
	NSString *longString = @"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
	
	NSString *substring;
	
	int highestProduct = 0;
	NSRange range;
	for(int i = 0; i < longString.length - 5; i++)
	{
		range = NSMakeRange(i, 5);
		
		substring = [longString substringWithRange:range];
		
		int product = ([substring characterAtIndex:0]-48) * ([substring characterAtIndex:1]-48) * ([substring characterAtIndex:2]-48) * ([substring characterAtIndex:3]-48) * ([substring characterAtIndex:4]-48);
		
		if(product > highestProduct)
			highestProduct = product;
	}
	
	question = [NSString stringWithFormat:@"Find the greatest product of five consecutive digits in the 1000-digit number. %@", longString];
	answer = [NSString stringWithFormat:@"%The highest product from 5 consecutive numbers is %i", highestProduct];
	explanation = @"Take 5 digit substrings of the larger string and iterate down the list.  Take the character value at each of the 5 numbers in your new substring and multiply that number minus 48 (the ASCII offset for numbers) and then check if this number is higher than your current highest number.  If it is, it becomes the new highest number.  Repeat the process on the next substring of 5 numbers.";
}

-(NSInteger) numberOfSectionsInTableView:(UITableView*) tableView 
{
	return 1;
}

-(NSInteger) tableView:(UITableView*) tableView numberOfRowsInSection: (NSInteger) section 
{
	return sizeof(problemList)/sizeof(SEL);
}

-(UITableViewCell*)tableView:(UITableView*) tableView cellForRowAtIndexPath: (NSIndexPath*)indexPath
{
    static NSString *myIdentifier = @"MyIdentifier";
	UITableViewCell* cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier: myIdentifier];
	
	if(cell == nil)
	{
        cell = [[UITableViewCell alloc] initWithFrame:CGRectZero];
    }
	
	cell.textLabel.text = [NSString stringWithFormat:@"Problem %i", indexPath.row + 1];
	cell.selectionStyle = UITableViewCellSelectionStyleNone;
	
	return cell;
}

-(void) tableView:(UITableView *)table didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	if([self respondsToSelector: problemList[indexPath.row]])
		[self solveProblem: indexPath.row];
	else
	{
		[self dismissAllPopTipViews];
		self.currentPopTipViewTarget = nil;
		
		CMPopTipView *popTipView;
		popTipView = [[CMPopTipView alloc] initWithMessage:@"There is no solution for this problem yet."];
		popTipView.delegate = self;
		popTipView.disableTapToDismiss = NO;
		
		popTipView.backgroundColor = [UIColor lightGrayColor];
		popTipView.textColor = [UIColor blackColor];
		
		popTipView.animation = arc4random() % 2;
		
		[popTipView presentPointingAtView:[table cellForRowAtIndexPath:indexPath].contentView inView:self.view animated:YES];
		
		[visiblePopTipViews addObject:popTipView];
		self.currentPopTipViewTarget = [tableView cellForRowAtIndexPath:indexPath];
	}
}

-(void) dismissAllPopTipViews 
{
	while ([visiblePopTipViews count] > 0) 
	{
		CMPopTipView *popTipView = [visiblePopTipViews objectAtIndex:0];
		[visiblePopTipViews removeObjectAtIndex:0];
		[popTipView dismissAnimated:YES];
	}
}

- (void)popTipViewWasDismissedByUser:(CMPopTipView *)popTipView 
{
	[visiblePopTipViews removeObject:popTipView];
	self.currentPopTipViewTarget = nil;
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

- (void)viewDidUnload
{
    [super viewDidUnload];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
	return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}

-(void) loadProblems
{
    for (int i = 0; i < 50; i++)
    {
        problemList [i] = NSSelectorFromString([NSString stringWithFormat:@"problem%i", i+1]);
    }
}

@end
